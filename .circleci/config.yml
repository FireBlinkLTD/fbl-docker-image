#
# For local execution:
# circleci local execute --skip-checkout=false --repo-url="/fake-remote" --volume="${$(pwd)}":"/fake-remote"
#
# Note: you might need to uncomment few lines below (read comments) as local and remote machines are different
#
version: 2

jobs:  
  release:
    working_directory: ~/workspace
    docker:
      - image: circleci/node:10.15
    steps:
      - checkout

      - run:
          name: Download hub
          command: |         
            curl -L https://github.com/github/hub/releases/download/v2.12.3/hub-linux-amd64-2.12.3.tgz --output hub-linux-amd64-2.12.3.tgz
            tar xvzf hub-linux-amd64-2.12.3.tgz
           
      - run:
          name: Download jq
          command: |
            curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 --output jq

      - run:
          name: Create GitHub Release
          command: |
            export GIT_EDITOR=nano

            VERSIONS=$(jq -r '.dependencies | to_entries[] | join(" - ")' package.json)           

            hub-linux-amd64-2.12.3/bin/hub release create 1.0.$CIRCLE_BUILD_NUM -m "Automatic release for latest changes.

            Included FBL and FBL Plugins:

            $VERSIONS"
  build:
    working_directory: ~/workspace
    machine: true
    steps:         
      - run:
          name: Install nvm
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash

            if [[ -z "$CIRCLE_BUILD_NUM" ]]; then
              export NVM_DIR="$HOME/.nvm"
              echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
              echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            else
              export NVM_DIR=/opt/circleci/.nvm
              echo 'export NVM_DIR=/opt/circleci/.nvm' >> $BASH_ENV
              echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            fi
            
      - run:  
          name: Install Node.js
          command: |           
            nvm install --lts
            nvm alias default 'lts/*'

            # Install Yarn package manager
            npm install --global yarn
 
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - checkout

      - run: 
          name: run tests and generate coverage report
          command: |
            npm run docker:test


workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - /greenkeeper/.*/
                - master

      - release:
          requires:
            - build            
          filters:
            branches:
              only: 
                - master